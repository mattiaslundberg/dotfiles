if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# standard aliases
alias ls=exa
alias ll='exa -la --git'
alias la='exa -a'
alias l='exa -l --git'
alias cd.='cd ..'
alias cd..='cd ..'
alias mkdir='mkdir -pv'
cl() { cd $1 && la ; }
mc() { mkdir $1 && cd $1 ; }

alias g='git'


if [ -x /usr/bin/pacman ]; then
    # pacman aliases
    alias install='sudo pacman -S'
    alias upgrade='sudo pacman -Syu && sudo chkboot'
    alias uninstall='sudo pacman -Rs'
    alias search='sudo pacman -Ss'
fi

if [ -x /usr/bin/apt-get ]; then
    # apt aliases
    alias install='sudo apt-get install'
    alias update='sudo apt-get update'
    alias upgrade='sudo apt-get update && sudo apt-get upgrade'
    alias dist-upgrade='sudo apt-get update && sudo apt-get dist-upgrade'
    alias autoremove='sudo apt-get autoremove'
    alias uninstall='sudo apt-get remove'
    alias search='apt-cache search'
    alias showpkg='apt-cache show'
fi

# Some other aliases
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias 'du.'='du -hsx * | sort -rh | head -10'
alias reload='source ~/.zshrc'
alias cleanflash='rm -rf ${HOME}/.macromedia/* ${HOME}/.adobe/*'
alias cleantemp='find $HOME -type f -name "*~" -print -exec rm {} \;'
alias cleanlatex='rm -f dia/*.(pdf|eps) ; rubber --clean *.tex'

alias ports='sudo netstat -tulpan'
alias myip='python -c "from pyquery import PyQuery as pq; dom=pq(url=\"http://checkip.dyndns.org:8245/\"); print dom(\"body\")[0].text.split(\" \")[-1]"'
alias temp='python -c "from pyquery import PyQuery as pq; dom=pq(url=\"http://marge.campus.ltu.se/temp/\"); print dom(\"td.px13>pre\")[0].text.split(\"\n\")[3].replace(\"|\",\"\").strip()"'
alias su='sudo -E -s'
alias root='sudo -E -s'
alias sudo='sudo ' # Make sudo and aliases compatible
alias tmux="TERM=screen-256color-bce tmux"

alias fixkbd="xkbcomp ~/.keymap.xkb $DISPLAY 2>/dev/null"

wsharkremote() { wireshark -k -i <(ssh $1 "tcpdump -i $2 -U -s0 -w - $3"); }

mktmp() { mkdir $1 && sudo mount -t tmpfs none $(pwd)/$1 }
rmtmp() { sudo umount $(pwd)/$1 && rmdir $1 }

# Reload all specifically loaded modules
modreload() {
    for m in $(cat /etc/modules-load.d/*); do
        sudo modprobe $m
    done
}

usbmnt() {
    NODES=($(ls -1 /dev/sd[abcdefghij][123456]))
    I=1

    echo "Available devices:"
    for N in $NODES ; do
        echo " $I) $N"
        (( I++ ))
    done

    echo "Select device:"
    read DEVID
    echo "Mounting device ${NODES[$DEVID]}"
    sudo cryptsetup luksOpen ${NODES[$DEVID]} usb
    sudo mount /dev/mapper/usb /mnt/usb
}

usbumnt() {
    sudo umount /mnt/usb
    sudo cryptsetup luksClose usb
}

alias docker-gc="FORCE_IMAGE_REMOVAL=1 docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc spotify/docker-gc"


# ssh via sshrc to vagrant boxes
vs() {
    TARGET_HOST=${1-"default"}
    vagrant ssh-config ${TARGET_HOST} > /tmp/vagrantsetup_${TARGET_HOST}
    sshrc -F /tmp/vagrantsetup_${TARGET_HOST} ${TARGET_HOST}
}

case $HOST in
    x230)
        netw() {
            case "$1" in
                f*)
                    sudo systemctl stop netctl-auto@wlp3s0.service
                    sudo netctl start fixed
                ;;
                d*)
                    sudo netctl stop fixed
                    sudo systemctl start netctl-auto@wlp3s0.service
                ;;
                *)
                    echo "Usage fixed|default"
                ;;
            esac
        }

        dock() {
            case "$1" in
                on)
                    netw fixed
                    xrandr --output LVDS1 --off --output HDMI3 --auto
                    fixkbd
                ;;
                off)
                    netw default
                    xrandr --output LVDS1 --auto --output HDMI3 --off
                    fixkbd
                ;;
                *)
                    echo "Usage on|off"
                ;;
            esac
        }
    ;;
    *)

    ;;
esac
