if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# standard aliases
alias ll='ls -la'
alias la='ls -A'
alias l='ls -l'
alias cd.='cd ..'
alias cd..='cd ..'
alias mkdir='mkdir -pv'
cl() { cd $1 && la ; }
mc() { mkdir $1 && cd $1 ; }

alias g='git'


if [ -x /usr/bin/packer ]; then
    # aur aliases
    alias aurinstall='packer --noedit --auronly -S'
    alias aurupgrade='packer --noedit --auronly -Syu'
    alias aursearch='packer --auronly -Ss'
fi

if [ -x /usr/bin/pacman ]; then
    # pacman aliases
    alias install='sudo pacman -S'
    alias upgrade='sudo pacman -Syu && sudo chkboot'
    alias uninstall='sudo pacman -Rs'
    alias search='sudo pacman -Ss'
fi

if [ -x /usr/bin/apt-get ]; then
    # apt aliases
    alias install='sudo apt-get install'
    alias update='sudo apt-get update'
    alias upgrade='sudo apt-get update && sudo apt-get upgrade'
    alias dist-upgrade='sudo apt-get update && sudo apt-get dist-upgrade'
    alias autoremove='sudo apt-get autoremove'
    alias uninstall='sudo apt-get remove'
    alias search='apt-cache search'
    alias showpkg='apt-cache show'
fi

# Toggle git edit mode
alias editmode='([ -d ~/.git ] && mv ~/.git{,_repo}) || mv ~/.git{_repo,}'

# Some other aliases
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias 'du.'='du -hsx * | sort -rh | head -10'
alias reload='source ~/.zshrc'
alias cleanflash='rm -rf ${HOME}/.macromedia/* ${HOME}/.adobe/*'
alias cleantemp='find $HOME -type f -name "*~" -print -exec rm {} \;'
alias cleanlatex='rm -f dia/*.(pdf|eps) ; rubber --clean *.tex'

alias ports='sudo netstat -tulpan'
alias myip='python -c "from pyquery import PyQuery as pq; dom=pq(url=\"http://checkip.dyndns.org:8245/\"); print dom(\"body\")[0].text.split(\" \")[-1]"'
alias temp='python -c "from pyquery import PyQuery as pq; dom=pq(url=\"http://marge.campus.ltu.se/temp/\"); print dom(\"td.px13>pre\")[0].text.split(\"\n\")[3].replace(\"|\",\"\").strip()"'
alias su='sudo -E -s'
alias root='sudo -E -s'
alias sudo='sudo ' # Make sudo and aliases compatible
alias tmux="TERM=screen-256color-bce tmux"

alias fixkbd="xkbcomp ~/.keymap.xkb $DISPLAY 2>/dev/null"

diaconvert() { echo $1 | awk -F '.' '{ print $1 }' | awk '{ print "dia -e " $f ".eps -t eps " $f ".dia ; epstopdf " $f ".eps " }' | sh ;}

wsharkremote() { wireshark -k -i <(ssh $1 "tcpdump -i $2 -U -s0 -w - $3"); }

mktmp() { mkdir $1 && sudo mount -t tmpfs none $(pwd)/$1 }
rmtmp() { sudo umount $(pwd)/$1 && rmdir $1 }

builddeb() {
    [ -d $1 ] || exit 1
    mkdir /tmp/mattias
    rsync -ar $1 /tmp/mattias
    cd /tmp/mattias/$1 ; dpkg-buildpackage -b -tc
    rm -rf /tmp/mattias/$1
}

gitbranchclean() {
    for b in $(git branch | cut -b3-); do
        [[ "$b" == "master" || "$b" == "develop" ]] && continue
        git branch -D "$b"
    done
}

# Reload all specifically loaded modules
modreload() {
    for m in $(cat /etc/modules-load.d/*); do
        sudo modprobe $m
    done
}

# Tmux helpers
ta() { # Attach
    echo -n "\033]0;$1\007"
    tmux attach-session -t $1
}

tn() { # Create
    echo -n "\033]0;$1\007"
    tmux new-session -s $1
}


usbmnt() {
    NODES=($(ls -1 /dev/sd[abcdefghij][123456]))
    I=1

    echo "Available devices:"
    for N in $NODES ; do
        echo " $I) $N"
        (( I++ ))
    done

    echo "Select device:"
    read DEVID
    echo "Mounting device ${NODES[$DEVID]}"
    sudo cryptsetup luksOpen ${NODES[$DEVID]} usb
    sudo mount /dev/mapper/usb /mnt/usb
}

usbumnt() {
    sudo umount /mnt/usb
    sudo cryptsetup luksClose usb
}


# copy and paste from the command line - http://www.shell-fu.org/lister.php?id=177
ccopy(){ cp $1 /tmp/ccopy.$1; }
alias cpaste="ls /tmp/ccopy* | sed 's|[^\.]*.\.||' | xargs -I % mv /tmp/ccopy.% ./%"

alias mntdropbox='encfs -o allow_root ~/Dropbox/encrypted.bc/ ~/DropboxDecrypted/'

viminstall(){
    git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    vimupgrade
}
vimupgrade(){
    vim +PluginInstall +PluginClean +qall
}

# Helpers for running skype in a docker container.
# Requires local "mattiaslundberg/skype" docker image.
# And "skype" ssh alias for port 55555
skypeinstall(){
    docker run -d --name=myskype -v /home/mattias/.Skype:/home/docker/.Skype --device=/dev/video0 -p 55555:22 mattiaslundberg/skype
    ssh-copy-id -i ~/.ssh/id_ecdsa.pub skype
    docker stop myskype
}
# Start docker and attach to skype
skypestart(){
    docker start myskype
    sleep 5
    ssh skype skype-pulseaudio || true
    docker stop myskype
}

# ssh via sshrc to vagrant boxes
vs() {
    TARGET_HOST=${1-"default"}
    vagrant ssh-config ${TARGET_HOST} > /tmp/vagrantsetup_${TARGET_HOST}
    sshrc -F /tmp/vagrantsetup_${TARGET_HOST} ${TARGET_HOST}
}

vchrome() {
    vagrant ssh-config default > /tmp/vchrome
    ssh -X -F /tmp/vchrome default google-chrome
}

case $HOST in
    toad)
        hdmi() {
            case "$1" in
                fhd)
                    xrandr --auto --output HDMI2 --mode 1920x1080 --right-of eDP1
                ;;
                off)
                    xrandr --auto --output HDMI2 --off
                ;;
                *)
                    echo "Usage off|fhd"
                ;;
            esac
        }
        dp() {
            fixkbd
            case "$1" in
                home)
                    xrandr --output eDP1 --off --output HDMI1 --scale 1.4x1.4 --panning 1680x1050 --auto --fb 2352x1470
                ;;
                off)
                    xrandr --output eDP1 --auto --output HDMI1 --off
                ;;
                *)
                    echo "Usage off|home"
                ;;
            esac
        }
        netw() {
            case "$1" in
                f*)
                    sudo systemctl stop netctl-auto@wlo1.service
                    sudo netctl start fixed
                ;;
                d*)
                    sudo netctl stop fixed
                    sudo systemctl start netctl-auto@wlo1.service
                ;;
                *)
                    echo "Usage fixed|default"
                ;;
            esac
        }
    ;;
    x230)
        netw() {
            case "$1" in
                f*)
                    sudo systemctl stop netctl-auto@wlp3s0.service
                    sudo netctl start fixed
                ;;
                d*)
                    sudo netctl stop fixed
                    sudo systemctl start netctl-auto@wlp3s0.service
                ;;
                *)
                    echo "Usage fixed|default"
                ;;
            esac
        }

        dock() {
            case "$1" in
                on)
                    netw fixed
                    xrandr --output LVDS1 --off --output HDMI3 --auto
                    fixkbd
                ;;
                off)
                    netw default
                    xrandr --output LVDS1 --auto --output HDMI3 --off
                    fixkbd
                ;;
                *)
                    echo "Usage on|off"
                ;;
            esac
        }
    ;;
    *)

    ;;
esac
